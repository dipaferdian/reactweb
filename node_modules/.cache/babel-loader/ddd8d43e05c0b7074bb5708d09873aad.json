{"ast":null,"code":"import { createSlice, configureStore } from '@reduxjs/toolkit';\nconst counterSlice = createSlice({\n  name: 'counter',\n  initialState: {\n    value: 0\n  },\n  reducers: {\n    incremented: state => {\n      // Redux Toolkit allows us to write \"mutating\" logic in reducers. It\n      // doesn't actually mutate the state because it uses the Immer library,\n      // which detects changes to a \"draft state\" and produces a brand new\n      // immutable state based off those changes\n      state.value += 1;\n    },\n    decremented: state => {\n      state.value -= 1;\n    }\n  }\n});\nexport const {\n  incremented,\n  decremented\n} = counterSlice.actions;\nconst store = configureStore({\n  reducer: counterSlice.reducer\n}); // Can still subscribe to the store\n\nstore.subscribe(() => console.log(store.getState())); // Still pass action objects to `dispatch`, but they're created for us\n\nstore.dispatch(incremented(4)); // {value: 1}\n\nstore.dispatch(incremented(2)); // {value: 2}\n\nstore.dispatch(decremented(1)); // {value: 1}","map":{"version":3,"sources":["/home/dipaferdian/reactweb/src/App.js"],"names":["createSlice","configureStore","counterSlice","name","initialState","value","reducers","incremented","state","decremented","actions","store","reducer","subscribe","console","log","getState","dispatch"],"mappings":"AAAA,SAASA,WAAT,EAAsBC,cAAtB,QAA4C,kBAA5C;AAEA,MAAMC,YAAY,GAAGF,WAAW,CAAC;AAC/BG,EAAAA,IAAI,EAAE,SADyB;AAE/BC,EAAAA,YAAY,EAAE;AACZC,IAAAA,KAAK,EAAE;AADK,GAFiB;AAK/BC,EAAAA,QAAQ,EAAE;AACRC,IAAAA,WAAW,EAAEC,KAAK,IAAI;AACpB;AACA;AACA;AACA;AACAA,MAAAA,KAAK,CAACH,KAAN,IAAe,CAAf;AACD,KAPO;AAQRI,IAAAA,WAAW,EAAED,KAAK,IAAI;AACpBA,MAAAA,KAAK,CAACH,KAAN,IAAe,CAAf;AACD;AAVO;AALqB,CAAD,CAAhC;AAmBA,OAAO,MAAM;AAAEE,EAAAA,WAAF;AAAeE,EAAAA;AAAf,IAA+BP,YAAY,CAACQ,OAAlD;AAEP,MAAMC,KAAK,GAAGV,cAAc,CAAC;AAC3BW,EAAAA,OAAO,EAAEV,YAAY,CAACU;AADK,CAAD,CAA5B,C,CAIA;;AACAD,KAAK,CAACE,SAAN,CAAgB,MAAMC,OAAO,CAACC,GAAR,CAAYJ,KAAK,CAACK,QAAN,EAAZ,CAAtB,E,CAEA;;AACAL,KAAK,CAACM,QAAN,CAAeV,WAAW,CAAC,CAAD,CAA1B,E,CACA;;AACAI,KAAK,CAACM,QAAN,CAAeV,WAAW,CAAC,CAAD,CAA1B,E,CACA;;AACAI,KAAK,CAACM,QAAN,CAAeR,WAAW,CAAC,CAAD,CAA1B,E,CACA","sourcesContent":["import { createSlice, configureStore } from '@reduxjs/toolkit'\n\nconst counterSlice = createSlice({\n  name: 'counter',\n  initialState: {\n    value: 0\n  },\n  reducers: {\n    incremented: state => {\n      // Redux Toolkit allows us to write \"mutating\" logic in reducers. It\n      // doesn't actually mutate the state because it uses the Immer library,\n      // which detects changes to a \"draft state\" and produces a brand new\n      // immutable state based off those changes\n      state.value += 1\n    },\n    decremented: state => {\n      state.value -= 1\n    }\n  }\n})\n\nexport const { incremented, decremented } = counterSlice.actions\n\nconst store = configureStore({\n  reducer: counterSlice.reducer\n})\n\n// Can still subscribe to the store\nstore.subscribe(() => console.log(store.getState()))\n\n// Still pass action objects to `dispatch`, but they're created for us\nstore.dispatch(incremented(4))\n// {value: 1}\nstore.dispatch(incremented(2))\n// {value: 2}\nstore.dispatch(decremented(1))\n// {value: 1}\n"]},"metadata":{},"sourceType":"module"}