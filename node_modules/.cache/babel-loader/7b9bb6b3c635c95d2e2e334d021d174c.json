{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\n\nvar _s = $RefreshSig$();\n\nimport React, { useEffect, useState } from 'react';\nimport \"./sass/main.css\";\nimport \"../node_modules/bootstrap/dist/css/bootstrap.css\";\nimport \"../node_modules/bootstrap/dist/js/bootstrap.bundle\";\nimport getAPI from '../src/redux/';\n\nfunction App() {\n  _s();\n\n  const [list, setList] = useState([]);\n  useEffect(() => {\n    let mounted = true;\n    getList().then(items => {\n      if (mounted) {\n        setList(items);\n      }\n    });\n    return () => mounted = false;\n  }, []);\n  return /*#__PURE__*/_jsxDEV(_Fragment, {}, void 0, false);\n}\n\n_s(App, \"ZBNfaudzy8bVxb8UgkyyMnLdlWY=\");\n\n_c = App;\nexport default App;\n\nvar _c;\n\n$RefreshReg$(_c, \"App\");","map":{"version":3,"sources":["/home/dipaferdian/reactweb/src/App.js"],"names":["React","useEffect","useState","getAPI","App","list","setList","mounted","getList","then","items"],"mappings":";;;;;AAAA,OAAOA,KAAP,IAAgBC,SAAhB,EAA2BC,QAA3B,QAA2C,OAA3C;AACA,OAAO,iBAAP;AACA,OAAO,kDAAP;AACA,OAAO,oDAAP;AACA,OAAOC,MAAP,MAAmB,eAAnB;;AACA,SAASC,GAAT,GAAe;AAAA;;AAGb,QAAM,CAACC,IAAD,EAAOC,OAAP,IAAkBJ,QAAQ,CAAC,EAAD,CAAhC;AAEAD,EAAAA,SAAS,CAAC,MAAM;AACf,QAAIM,OAAO,GAAG,IAAd;AACAC,IAAAA,OAAO,GACJC,IADH,CACQC,KAAK,IAAI;AACb,UAAGH,OAAH,EAAY;AACVD,QAAAA,OAAO,CAACI,KAAD,CAAP;AACD;AACF,KALH;AAMA,WAAO,MAAMH,OAAO,GAAG,KAAvB;AACD,GATS,EASP,EATO,CAAT;AAYA,sBACE,qCADF;AAMD;;GAvBQH,G;;KAAAA,G;AAyBT,eAAeA,GAAf","sourcesContent":["import React, { useEffect, useState } from 'react';\nimport \"./sass/main.css\";\nimport \"../node_modules/bootstrap/dist/css/bootstrap.css\";\nimport \"../node_modules/bootstrap/dist/js/bootstrap.bundle\";\nimport getAPI from '../src/redux/';\nfunction App() {\n\n\n  const [list, setList] = useState([]);\n\n  useEffect(() => {\n   let mounted = true;\n   getList()\n     .then(items => {\n       if(mounted) {\n         setList(items)\n       }\n     })\n   return () => mounted = false;\n }, [])\n\n\n  return (\n    <>\n     \n      \n    </>\n  );\n}\n\nexport default App;\n"]},"metadata":{},"sourceType":"module"}