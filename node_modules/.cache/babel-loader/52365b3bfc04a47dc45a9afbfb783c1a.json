{"ast":null,"code":"import axios from \"axios\";\nimport { FETCH_USERS_REQUEST, FETCH_USERS_SUCCESS, FETCH_USERS_FAILURE, POST_USERS_REQUEST, POST_USERS_SUCCESS, POST_USERS_FAILURE } from \"../redux/userTypes\";\nexport const fetchUsers = () => {\n  return dispatch => {\n    dispatch(fetchUsersRequest());\n    axios.get(\"http://localhost:3333/person\").then(response => {\n      // response.data is the users\n      const users = response.data;\n      dispatch(fetchUsersSuccess(users));\n    }).catch(error => {\n      // error.message is the error message\n      dispatch(fetchUsersFailure(error.message));\n    });\n  };\n};\nexport const postUsers = ({\n  setname\n}) => {\n  return dispatch => {\n    dispatch(postUsersRequest());\n    axios.post(\"http://localhost:3333/person\", {\n      setname: set,\n      seturl: 'null'\n    }).then(response => {\n      // response.data is the users\n      const users = response.data;\n      dispatch(postUsersSuccess(users));\n    }).catch(error => {\n      // error.message is the error message\n      dispatch(postUsersFailure(error.message));\n    });\n  };\n};\nexport const fetchUsersRequest = () => {\n  return {\n    type: FETCH_USERS_REQUEST\n  };\n};\nexport const fetchUsersSuccess = users => {\n  return {\n    type: FETCH_USERS_SUCCESS,\n    payload: users\n  };\n};\nexport const fetchUsersFailure = error => {\n  return {\n    type: FETCH_USERS_FAILURE,\n    payload: error\n  };\n};\nexport const postUsersRequest = () => {\n  return {\n    type: POST_USERS_REQUEST\n  };\n};\nexport const postUsersSuccess = users => {\n  return {\n    type: POST_USERS_SUCCESS,\n    payload: users\n  };\n};\nexport const postUsersFailure = error => {\n  return {\n    type: POST_USERS_FAILURE,\n    payload: error\n  };\n};","map":{"version":3,"sources":["/home/dipaferdian/reactweb/src/redux/actions.js"],"names":["axios","FETCH_USERS_REQUEST","FETCH_USERS_SUCCESS","FETCH_USERS_FAILURE","POST_USERS_REQUEST","POST_USERS_SUCCESS","POST_USERS_FAILURE","fetchUsers","dispatch","fetchUsersRequest","get","then","response","users","data","fetchUsersSuccess","catch","error","fetchUsersFailure","message","postUsers","setname","postUsersRequest","post","set","seturl","postUsersSuccess","postUsersFailure","type","payload"],"mappings":"AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,SACEC,mBADF,EAEEC,mBAFF,EAGEC,mBAHF,EAIEC,kBAJF,EAKEC,kBALF,EAMEC,kBANF,QAOO,oBAPP;AASA,OAAO,MAAMC,UAAU,GAAG,MAAM;AAC9B,SAAQC,QAAD,IAAc;AACnBA,IAAAA,QAAQ,CAACC,iBAAiB,EAAlB,CAAR;AACAT,IAAAA,KAAK,CACFU,GADH,CACO,8BADP,EAEGC,IAFH,CAESC,QAAD,IAAc;AAClB;AACA,YAAMC,KAAK,GAAGD,QAAQ,CAACE,IAAvB;AACAN,MAAAA,QAAQ,CAACO,iBAAiB,CAACF,KAAD,CAAlB,CAAR;AACD,KANH,EAOGG,KAPH,CAOUC,KAAD,IAAW;AAChB;AACAT,MAAAA,QAAQ,CAACU,iBAAiB,CAACD,KAAK,CAACE,OAAP,CAAlB,CAAR;AACD,KAVH;AAWD,GAbD;AAcD,CAfM;AAiBP,OAAO,MAAMC,SAAS,GAAG,CAAC;AAACC,EAAAA;AAAD,CAAD,KAAgB;AACvC,SAAQb,QAAD,IAAc;AACnBA,IAAAA,QAAQ,CAACc,gBAAgB,EAAjB,CAAR;AACAtB,IAAAA,KAAK,CACFuB,IADH,CACQ,8BADR,EACwC;AACpCF,MAAAA,OAAO,EAACG,GAD4B;AAEpCC,MAAAA,MAAM,EAAC;AAF6B,KADxC,EAKGd,IALH,CAKSC,QAAD,IAAc;AAClB;AACA,YAAMC,KAAK,GAAGD,QAAQ,CAACE,IAAvB;AACAN,MAAAA,QAAQ,CAACkB,gBAAgB,CAACb,KAAD,CAAjB,CAAR;AACD,KATH,EAUGG,KAVH,CAUUC,KAAD,IAAW;AAChB;AACAT,MAAAA,QAAQ,CAACmB,gBAAgB,CAACV,KAAK,CAACE,OAAP,CAAjB,CAAR;AACD,KAbH;AAcD,GAhBD;AAiBD,CAlBM;AAoBP,OAAO,MAAMV,iBAAiB,GAAG,MAAM;AACrC,SAAO;AACLmB,IAAAA,IAAI,EAAE3B;AADD,GAAP;AAGD,CAJM;AAMP,OAAO,MAAMc,iBAAiB,GAAIF,KAAD,IAAW;AAC1C,SAAO;AACLe,IAAAA,IAAI,EAAE1B,mBADD;AAEL2B,IAAAA,OAAO,EAAEhB;AAFJ,GAAP;AAID,CALM;AAOP,OAAO,MAAMK,iBAAiB,GAAID,KAAD,IAAW;AAC1C,SAAO;AACLW,IAAAA,IAAI,EAAEzB,mBADD;AAEL0B,IAAAA,OAAO,EAAEZ;AAFJ,GAAP;AAID,CALM;AAOP,OAAO,MAAMK,gBAAgB,GAAG,MAAM;AACpC,SAAO;AACLM,IAAAA,IAAI,EAAExB;AADD,GAAP;AAGD,CAJM;AAMP,OAAO,MAAMsB,gBAAgB,GAAIb,KAAD,IAAW;AACzC,SAAO;AACLe,IAAAA,IAAI,EAAEvB,kBADD;AAELwB,IAAAA,OAAO,EAAEhB;AAFJ,GAAP;AAID,CALM;AAOP,OAAO,MAAMc,gBAAgB,GAAIV,KAAD,IAAW;AACzC,SAAO;AACLW,IAAAA,IAAI,EAAEtB,kBADD;AAELuB,IAAAA,OAAO,EAAEZ;AAFJ,GAAP;AAID,CALM","sourcesContent":["import axios from \"axios\";\nimport {\n  FETCH_USERS_REQUEST,\n  FETCH_USERS_SUCCESS,\n  FETCH_USERS_FAILURE,\n  POST_USERS_REQUEST,\n  POST_USERS_SUCCESS,\n  POST_USERS_FAILURE,\n} from \"../redux/userTypes\";\n\nexport const fetchUsers = () => {\n  return (dispatch) => {\n    dispatch(fetchUsersRequest());\n    axios\n      .get(\"http://localhost:3333/person\")\n      .then((response) => {\n        // response.data is the users\n        const users = response.data;\n        dispatch(fetchUsersSuccess(users));\n      })\n      .catch((error) => {\n        // error.message is the error message\n        dispatch(fetchUsersFailure(error.message));\n      });\n  };\n};\n\nexport const postUsers = ({setname,}) => {\n  return (dispatch) => {\n    dispatch(postUsersRequest());\n    axios\n      .post(\"http://localhost:3333/person\", {\n        setname:set,\n        seturl:'null'\n      })\n      .then((response) => {\n        // response.data is the users\n        const users = response.data;\n        dispatch(postUsersSuccess(users));\n      })\n      .catch((error) => {\n        // error.message is the error message\n        dispatch(postUsersFailure(error.message));\n      });\n  };\n};\n\nexport const fetchUsersRequest = () => {\n  return {\n    type: FETCH_USERS_REQUEST,\n  };\n};\n\nexport const fetchUsersSuccess = (users) => {\n  return {\n    type: FETCH_USERS_SUCCESS,\n    payload: users,\n  };\n};\n\nexport const fetchUsersFailure = (error) => {\n  return {\n    type: FETCH_USERS_FAILURE,\n    payload: error,\n  };\n};\n\nexport const postUsersRequest = () => {\n  return {\n    type: POST_USERS_REQUEST,\n  };\n};\n\nexport const postUsersSuccess = (users) => {\n  return {\n    type: POST_USERS_SUCCESS,\n    payload: users,\n  };\n};\n\nexport const postUsersFailure = (error) => {\n  return {\n    type: POST_USERS_FAILURE,\n    payload: error,\n  };\n};\n"]},"metadata":{},"sourceType":"module"}